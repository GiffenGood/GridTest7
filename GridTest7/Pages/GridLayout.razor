@page "/"
@using GridTest.Client

<DxButton Text="Delete" @onclick="Delete" Enabled="GridPageState.SelectedPatient != null"></DxButton>
<DxButton Text="Add" @onclick="Add"></DxButton>

<h3>Page with Selection</h3>
<DxGrid Data="@patients" 
        @ref="grid"
        KeyFieldName="Id"
        CssClass="grid"
        SelectionMode="GridSelectionMode.Single"
        SelectedDataItem="GridPageState.SelectedPatient"
        SelectedDataItemChanged="SelectedDataItemChanged"
        AllowSelectRowByClick="true"
        KeyboardNavigationEnabled="true"
        LayoutAutoLoading="Grid_LayoutAutoLoading"
        LayoutAutoSaving="Grid_LayoutAutoSaving"
        >
    <Columns>
        <DxGridDataColumn Width="100" FieldName="@nameof(Patient.Id)"></DxGridDataColumn>
        <DxGridDataColumn FieldName="@nameof(Patient.LastName)"></DxGridDataColumn>
        <DxGridDataColumn FieldName="@nameof(Patient.FirstName)"></DxGridDataColumn>
        <DxGridDataColumn FieldName="@nameof(Patient.DateOfBirth)"></DxGridDataColumn>
    </Columns>
</DxGrid>

<div class="mt-2">Selected Patient: @((GridPageState.SelectedPatient as Patient)?.LastName)</div>
<div class="mt-2">PageIndex: @GridPageState.PageIndex</div>
<div>@patients.Count()</div>

<div class="mt-2">
    @if (grid != null)
    {
        foreach (var col in grid?.GetSortedColumns())
        {
            <div>@col.FieldName  @col.SortOrder</div>
        }
    }
</div>


@code {
    List<Patient> patients = new();
    DxGrid? grid;

    protected override async Task OnInitializedAsync()
    {
        patients = await Repo.GetPatients();
        if(GridPageState.SelectedPatient != null && 
           patients.Any(p=>p.Id == GridPageState.SelectedPatient?.Id))
        {
            GridPageState.SelectedPatient = GridPageState.SelectedPatient;
        }
    }

    async Task Grid_LayoutAutoLoading(GridPersistentLayoutEventArgs e)
    {
        if (GridPageState.Layout == null) return;
        e.Layout = GridPageState.Layout;
        Console.WriteLine($"LayoutAutoLoading: {e.Layout}");
    }

    async Task Grid_LayoutAutoSaving(GridPersistentLayoutEventArgs e)
    {
        GridPageState.Layout = e.Layout;
        Console.WriteLine($"LayoutAutoSaving: {e.Layout}");
    }
    
    private void SelectedDataItemChanged(object obj)
    {
        var pat = obj as Patient;
        Console.WriteLine($"Selected Patient: {pat?.LastName}");
        GridPageState.SelectedPatient = pat;
    }

    private void Delete()
    {
        patients.Remove(GridPageState.SelectedPatient);
        GridPageState.SelectedPatient = null;
        grid?.Reload();
    }

    private void Add()
    {
        var pat = Repo.MakeRandomePatient();
        patients.Add(pat);
        GridPageState.SelectedPatient = pat;
        grid?.Reload();
        grid?.MakeDataItemVisibleAsync(pat);
    }
}
