@page "/"
@using GridTest.Client

<div class="mt-2">
<DxButton Text="Add" @onclick="Add"></DxButton>
<DxButton Text="Delete" @onclick="Delete" Enabled="GridLayoutState.SelectedPatient != null"></DxButton>
</div>

<h3>Page with Selection @GetSelectedName()</h3>
<DxGrid Data="@patients" 
        @ref="grid"
        KeyFieldName="Id"
        CssClass="grid"
        SelectionMode="GridSelectionMode.Single"
        SelectedDataItem="GridLayoutState.SelectedPatient"
        SelectedDataItemChanged="SelectedDataItemChanged"
        AllowSelectRowByClick="true"
        KeyboardNavigationEnabled="true"
        LayoutAutoLoading="Grid_LayoutAutoLoading"
        LayoutAutoSaving="Grid_LayoutAutoSaving"
>
    <Columns>
        <DxGridDataColumn Width="100" FieldName="@nameof(Patient.Id)"></DxGridDataColumn>
        <DxGridDataColumn FieldName="@nameof(Patient.LastName)"></DxGridDataColumn>
        <DxGridDataColumn FieldName="@nameof(Patient.FirstName)"></DxGridDataColumn>
        <DxGridDataColumn FieldName="@nameof(Patient.DateOfBirth)"></DxGridDataColumn>
    </Columns>
</DxGrid>

<div class="d-flex mt-2">
    <div class="flex-grow-1">Patient Count @patients.Count()</div>
</div>

<h2 class="mt-2">What to test</h2>
<ul>
    <li>That selection is remembered</li>
    <li>That Page is remembered</li>
    <li>That sort order is remembered</li>
    <li>That when adding a patient they are then selected - accounting for sort order</li>
    <li>That when deleting a patient they are removed and grid updates.  No patient should be selected</li>
</ul>

@code {
    List<Patient> patients = new();
    DxGrid? grid;

    protected override async Task OnInitializedAsync()
    {
        patients = await Repo.GetPatients();
        if(GridLayoutState.SelectedPatient != null && 
           patients.Any(p=>p.Id == GridLayoutState.SelectedPatient?.Id))
        {
            GridLayoutState.SelectedPatient = GridLayoutState.SelectedPatient;
        }
    }

    async Task Grid_LayoutAutoLoading(GridPersistentLayoutEventArgs e)
    {
        if (GridLayoutState.Layout == null) return;
        e.Layout = GridLayoutState.Layout;
        Console.WriteLine($"LayoutAutoLoading: {e.Layout}");
    }

    async Task Grid_LayoutAutoSaving(GridPersistentLayoutEventArgs e)
    {
        GridLayoutState.Layout = e.Layout;
        Console.WriteLine($"LayoutAutoSaving: {e.Layout}");
    }
    
    private void SelectedDataItemChanged(object obj)
    {
        var pat = obj as Patient;
        Console.WriteLine($"Selected Patient: {pat?.LastName}");
        GridLayoutState.SelectedPatient = pat;
    }

    private void Delete()
    {
        patients.Remove(GridLayoutState.SelectedPatient);
        GridLayoutState.SelectedPatient = null;
        grid?.Reload();
    }

    private void Add()
    {
        var pat = Repo.MakeRandomePatient();
        patients.Add(pat);
        GridLayoutState.SelectedPatient = pat;
        grid?.Reload();
        grid?.MakeDataItemVisibleAsync(pat);
    }

    string GetSelectedName()
    {
        return $"({GridLayoutState.SelectedPatient?.LastName ?? "Nothing"})";
    }
}
